From 3c549a540bd14495bbcf7b1a4a29ba869e03c3d4 Mon Sep 17 00:00:00 2001
From: Elvis Pranskevichus <elvis@magic.io>
Date: Mon, 8 Feb 2016 15:16:40 -0500
Subject: [PATCH] electron build fixes

---
 common.gypi               | 52 ++++++++++++++++++++++++++----
 electron.gyp              | 82 +++++++++++++++++++++++++++++++----------------
 filenames.gypi            |  1 -
 toolchain.gypi            | 47 +--------------------------
 tools/atom_source_root.py |  5 +++
 tools/browserify.py       | 25 +++++++++++++++
 tools/get-endianness.py   |  4 +++
 tools/js2asar.py          | 13 ++++----
 8 files changed, 142 insertions(+), 87 deletions(-)
 create mode 100644 tools/atom_source_root.py
 create mode 100644 tools/browserify.py
 create mode 100644 tools/get-endianness.py

diff --git a/common.gypi b/common.gypi
index a8028b5f4..17444d415 100644
--- a/common.gypi
+++ b/common.gypi
@@ -17,24 +17,20 @@
     'use_openssl_def': 0,
     'OPENSSL_PRODUCT': 'libopenssl.a',
     'node_release_urlbase': 'https://atom.io/download/atom-shell',
-    'node_byteorder': '<!(node <(DEPTH)/tools/get-endianness.js)',
+    'node_byteorder': '<!(python <(DEPTH)/tools/get-endianness.py)',
     'node_target_type': 'shared_library',
     'node_install_npm': 'false',
     'node_prefix': '',
     'node_shared': 'true',
-    'node_shared_cares': 'false',
-    'node_shared_http_parser': 'false',
-    'node_shared_libuv': 'false',
-    'node_shared_openssl': 'false',
     'node_shared_v8': 'true',
-    'node_shared_zlib': 'false',
     'node_tag': '',
+    'node_module_version': '',
     'node_use_dtrace': 'false',
     'node_use_etw': 'false',
     'node_use_mdb': 'false',
     'node_use_openssl': 'true',
     'node_use_perfctr': 'false',
-    'node_use_v8_platform': 'false',
+    'node_use_v8_platform': 'true',
     'node_use_bundled_v8': 'false',
     'node_enable_d8': 'false',
     'uv_library': 'static_library',
@@ -44,10 +40,37 @@
     'v8_postmortem_support': 'false',
     'v8_enable_i18n_support': 'false',
     'v8_inspector': 'false',
+    'v8_gyp_path': '<(DEPTH)/v8/src/v8.gyp',
+    'v8_libraries': '["v8", "v8_snapshot", "v8_nosnapshot", "v8_external_snapshot", "v8_base", "v8_libbase", "v8_libplatform"]',
+    'v8_target_type': 'shared_library',
+    'v8_use_snapshot': 'true',
+    'v8_use_external_startup_data': 1,
   },
   # Settings to compile node under Windows.
   'target_defaults': {
     'target_conditions': [
+      ['_target_name in <(v8_libraries) + ["node"]', {
+        'cflags!': [
+          '-fvisibility=hidden',
+          '-fdata-sections',
+          '-ffunction-sections',
+        ],
+        'cflags_cc!': [
+          '-fvisibility-inlines-hidden'
+        ],
+      }],
+
+      ['_target_name in <(v8_libraries) + ["mksnapshot"]', {
+        'defines': [
+          'V8_SHARED',
+          'BUILDING_V8_SHARED',
+        ],
+      }],
+
+      ['_target_name in ["icuuc", "icui18n"]', {
+        'cflags_cc!': ['-fno-rtti']
+      }],
+
       ['_target_name in ["libuv", "http_parser", "openssl", "openssl-cli", "cares", "node", "zlib"]', {
         'msvs_disabled_warnings': [
           4003,  # not enough actual parameters for macro 'V'
@@ -265,6 +288,21 @@
           }],  # OS=="win"
         ],
       }],
+      ['_target_name=="shell_runner_host_lib"', {
+        'conditions': [
+          ['icu_use_data_file_flag==1', {
+            'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_FILE'],
+          }, { # else icu_use_data_file_flag !=1
+            'conditions': [
+              ['OS=="win"', {
+                'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_SHARED'],
+              }, {
+                'defines': ['ICU_UTIL_DATA_IMPL=ICU_UTIL_DATA_STATIC'],
+              }],
+            ],
+          }],
+        ],
+      }],
     ],
     'msvs_cygwin_shell': 0, # Strangely setting it to 1 would make building under cygwin fail.
     'msvs_disabled_warnings': [
diff --git a/electron.gyp b/electron.gyp
index f9a3bf757..c6295e9b8 100644
--- a/electron.gyp
+++ b/electron.gyp
@@ -31,6 +31,7 @@
       'dependencies': [
         'js2asar',
         'app2asar',
+        'nodebin',
         '<(project_name)_lib',
       ],
       'sources': [
@@ -165,7 +166,7 @@
           ],
         }, {
           'dependencies': [
-            'vendor/breakpad/breakpad.gyp:dump_syms#host',
+            'breakpad/breakpad.gyp:dump_syms#host',
           ],
         }],  # OS=="win"
         ['OS=="linux"', {
@@ -182,7 +183,7 @@
                   }, {
                     'copied_libraries': [
                       '<(PRODUCT_DIR)/lib/libnode.so',
-                      '<(libchromiumcontent_dir)/libffmpeg.so',
+                      '<(PRODUCT_DIR)/lib/libv8.so',
                     ],
                   }],
                 ],
@@ -190,13 +191,8 @@
               'destination': '<(PRODUCT_DIR)',
               'files': [
                 '<@(copied_libraries)',
-                '<(libchromiumcontent_dir)/locales',
-                '<(libchromiumcontent_dir)/icudtl.dat',
-                '<(libchromiumcontent_dir)/blink_image_resources_200_percent.pak',
-                '<(libchromiumcontent_dir)/content_resources_200_percent.pak',
+                '<(libchromiumcontent_dir)/repack/chrome_200_percent.pak',
                 '<(libchromiumcontent_dir)/content_shell.pak',
-                '<(libchromiumcontent_dir)/ui_resources_200_percent.pak',
-                '<(libchromiumcontent_dir)/views_resources_200_percent.pak',
                 '<(libchromiumcontent_dir)/natives_blob.bin',
                 '<(libchromiumcontent_dir)/snapshot_blob.bin',
               ],
@@ -231,15 +227,14 @@
         '<@(lib_sources)',
       ],
       'include_dirs': [
-        '.',
         'chromium_src',
+        '.',
         'vendor/brightray',
         'vendor/native_mate',
         # Include atom_natives.h.
         '<(SHARED_INTERMEDIATE_DIR)',
         # Include directories for uv and node.
         'vendor/node/src',
-        'vendor/node/deps/http_parser',
         'vendor/node/deps/uv/include',
         # The `node.h` is using `#include"v8.h"`.
         '<(libchromiumcontent_src_dir)/v8/include',
@@ -292,8 +287,8 @@
             'vendor/node/deps/uv/uv.gyp:libuv',
             'vendor/node/deps/zlib/zlib.gyp:zlib',
             # Build with breakpad support.
-            'vendor/breakpad/breakpad.gyp:breakpad_handler',
-            'vendor/breakpad/breakpad.gyp:breakpad_sender',
+            'breakpad/breakpad.gyp:breakpad_handler',
+            'breakpad/breakpad.gyp:breakpad_sender',
           ],
         }],  # OS=="win"
         ['OS=="mac" and mas_build==0', {
@@ -331,7 +326,7 @@
               # Make binary search for libraries under current directory, so we
               # don't have to manually set $LD_LIBRARY_PATH:
               # http://serverfault.com/questions/279068/cant-find-so-in-the-same-directory-as-the-executable
-              '-rpath \$$ORIGIN',
+              '-Wl,-rpath=\$$ORIGIN/',
               # Make native module dynamic loading work.
               '-rdynamic',
             ],
@@ -342,10 +337,10 @@
             '-Wno-reserved-user-defined-literal',
           ],
           'include_dirs': [
-            'vendor/breakpad/src',
+            'breakpad/src',
           ],
           'dependencies': [
-            'vendor/breakpad/breakpad.gyp:breakpad_client',
+            'breakpad/breakpad.gyp:breakpad_client',
           ],
         }],  # OS=="linux"
       ],
@@ -353,6 +348,9 @@
     {
       'target_name': 'js2asar',
       'type': 'none',
+      'dependencies': [
+        'nodebin'
+      ],
       'actions': [
         {
           'action_name': 'js2asar',
@@ -374,6 +372,7 @@
           'action': [
             'python',
             'tools/js2asar.py',
+            '<(PRODUCT_DIR)/nodebin',
             '<@(_outputs)',
             'lib',
             '<@(_inputs)',
@@ -384,6 +383,9 @@
     {
       'target_name': 'app2asar',
       'type': 'none',
+      'dependencies': [
+        'nodebin'
+      ],
       'actions': [
         {
           'action_name': 'app2asar',
@@ -405,6 +407,7 @@
           'action': [
             'python',
             'tools/js2asar.py',
+            '<(PRODUCT_DIR)/nodebin',
             '<@(_outputs)',
             'default_app',
             '<@(_inputs)',
@@ -430,6 +433,7 @@
       'dependencies': [
         # depend on this target to ensure the '<(js2c_input_dir)' is created
         'atom_js2c_copy',
+        'nodebin'
       ],
       'actions': [
         {
@@ -441,13 +445,10 @@
             '<(js2c_input_dir)/preload_bundle.js',
           ],
           'action': [
-            'npm',
-            'run',
-            '--silent',
-            'browserify',
-            '--',
+            'python',
+            'tools/browserify.py',
+            '<(PRODUCT_DIR)/nodebin',
             'lib/sandboxed_renderer/init.js',
-            '-o',
             '<@(_outputs)',
           ],
         },
@@ -460,13 +461,10 @@
             '<(js2c_input_dir)/isolated_bundle.js',
           ],
           'action': [
-            'npm',
-            'run',
-            '--silent',
-            'browserify',
-            '--',
+            'python',
+            'tools/browserify.py',
+            '<(PRODUCT_DIR)/nodebin',
             'lib/isolated_renderer/init.js',
-            '-o',
             '<@(_outputs)',
           ],
         },
@@ -500,6 +498,36 @@
         }
       ],
     },  # target atom_js2c
+    {
+      'target_name': 'nodebin',
+      'type': 'executable',
+      'sources': [
+        'vendor/node/src/node_main.cc',
+      ],
+      'dependencies': [
+        'vendor/node/node.gyp:node',
+      ],
+      'include_dirs': [
+        '.',
+        'vendor/native_mate',
+        # Include atom_natives.h.
+        '<(SHARED_INTERMEDIATE_DIR)',
+        # Include directories for uv and node.
+        'vendor/node/src',
+        'vendor/node/deps/uv/include',
+        # The `node.h` is using `#include"v8.h"`.
+        '<(libchromiumcontent_src_dir)/v8/include',
+        # The `node.h` is using `#include"ares.h"`.
+        'vendor/node/deps/cares/include',
+      ],
+      'link_settings': {
+        'ldflags': [
+          '-Wl,-rpath=\$$ORIGIN/',
+          # Make native module dynamic loading work.
+          '-rdynamic',
+        ],
+      },
+    },  # target nodebin
   ],
   'conditions': [
     ['OS=="mac"', {
diff --git a/filenames.gypi b/filenames.gypi
index 6fe7612a5..27cba1f0e 100644
--- a/filenames.gypi
+++ b/filenames.gypi
@@ -594,7 +594,6 @@
       'chromium_src/extensions/browser/app_window/size_constraints.h',
       'chromium_src/extensions/common/url_pattern.cc',
       'chromium_src/extensions/common/url_pattern.h',
-      'chromium_src/library_loaders/libspeechd_loader.cc',
       'chromium_src/library_loaders/libspeechd.h',
       'chromium_src/net/test/embedded_test_server/stream_listen_socket.cc',
       'chromium_src/net/test/embedded_test_server/stream_listen_socket.h',
diff --git a/toolchain.gypi b/toolchain.gypi
index 1c5f8a713..2af11f56b 100644
--- a/toolchain.gypi
+++ b/toolchain.gypi
@@ -16,7 +16,7 @@
       'arm_neon%': 1,
 
       # Abosulte path to source root.
-      'source_root%': '<!(node <(DEPTH)/tools/atom_source_root.js)',
+      'source_root%': '<!(python <(DEPTH)/tools/atom_source_root.py)',
     },
 
     # Copy conditionally-set variables out one scope.
@@ -40,34 +40,6 @@
         'mac_sdk%': '<!(python <(DEPTH)/tools/mac/find_sdk.py <(mac_sdk_min))',
       }],
 
-      ['OS=="linux"', {
-        'variables': {
-          # The system libdir used for this ABI.
-          'system_libdir%': 'lib',
-
-          # Setting the path to sysroot.
-          'conditions': [
-            ['target_arch=="arm"', {
-              # sysroot needs to be an absolute path otherwise it generates
-              # incorrect results when passed to pkg-config
-              'sysroot%': '<(source_root)/vendor/debian_wheezy_arm-sysroot',
-            }],
-            ['target_arch=="ia32"', {
-              'sysroot%': '<(source_root)/vendor/debian_wheezy_i386-sysroot',
-            }],
-            ['target_arch=="x64"', {
-              'sysroot%': '<(source_root)/vendor/debian_wheezy_amd64-sysroot',
-            }],
-          ],
-        },
-        # Copy conditionally-set variables out one scope.
-        'sysroot%': '<(sysroot)',
-        'system_libdir%': '<(system_libdir)',
-
-        # Redirect pkg-config to search from sysroot.
-        'pkg-config%': '<(source_root)/tools/linux/pkg-config-wrapper "<(sysroot)" "<(target_arch)" "<(system_libdir)"',
-      }],
-
       # Set default compiler flags depending on ARM version.
       ['arm_version==6', {
         'arm_arch%': 'armv6',
@@ -136,23 +108,6 @@
       },
     }],
 
-    # Setup sysroot environment.
-    ['OS=="linux" and target_arch in ["arm", "ia32", "x64"]', {
-      'target_defaults': {
-        'target_conditions': [
-          ['_toolset=="target"', {
-            'cflags': [
-              '--sysroot=<(sysroot)',
-            ],
-            'ldflags': [
-              '--sysroot=<(sysroot)',
-              '<!(<(source_root)/tools/linux/sysroot_ld_path.sh <(sysroot))',
-            ],
-          }]
-        ],
-      },
-    }],  # sysroot
-
     # Setup cross-compilation on Linux.
     ['OS=="linux"', {
       'target_defaults': {
diff --git a/tools/atom_source_root.py b/tools/atom_source_root.py
new file mode 100644
index 000000000..316e99701
--- /dev/null
+++ b/tools/atom_source_root.py
@@ -0,0 +1,5 @@
+#!/usr/bin/env python
+
+import os.path
+
+print(os.path.abspath(os.path.dirname(os.path.dirname(__file__))))
diff --git a/tools/browserify.py b/tools/browserify.py
new file mode 100644
index 000000000..65e2a10b8
--- /dev/null
+++ b/tools/browserify.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python
+
+import os
+import subprocess
+import sys
+
+SOURCE_ROOT = os.path.dirname(os.path.dirname(__file__))
+
+
+def main():
+  node = sys.argv[1]
+  source = sys.argv[2]
+  output = sys.argv[3]
+
+  call_browserify(node, source, output)
+
+
+def call_browserify(node, source, output):
+  browserify = os.path.join(
+    SOURCE_ROOT, 'node_modules_browserify', '.bin', 'browserify')
+  subprocess.check_call([node, browserify, source, '-o', output])
+
+
+if __name__ == '__main__':
+  sys.exit(main())
diff --git a/tools/get-endianness.py b/tools/get-endianness.py
new file mode 100644
index 000000000..31507936f
--- /dev/null
+++ b/tools/get-endianness.py
@@ -0,0 +1,4 @@
+#!/usr/bin/env python
+
+import sys
+print(sys.byteorder)
diff --git a/tools/js2asar.py b/tools/js2asar.py
index adad1751e..ca7686893 100755
--- a/tools/js2asar.py
+++ b/tools/js2asar.py
@@ -11,13 +11,14 @@ SOURCE_ROOT = os.path.dirname(os.path.dirname(__file__))
 
 
 def main():
-  archive = sys.argv[1]
-  folder_name = sys.argv[2]
-  source_files = sys.argv[3:]
+  node = sys.argv[1]
+  archive = sys.argv[2]
+  folder_name = sys.argv[3]
+  source_files = sys.argv[4:]
 
   output_dir = tempfile.mkdtemp()
   copy_files(source_files, output_dir)
-  call_asar(archive, os.path.join(output_dir, folder_name))
+  call_asar(node, archive, os.path.join(output_dir, folder_name))
   shutil.rmtree(output_dir)
 
 
@@ -28,11 +29,11 @@ def copy_files(source_files, output_dir):
     shutil.copy2(source_file, output_path)
 
 
-def call_asar(archive, output_dir):
+def call_asar(node, archive, output_dir):
   asar = os.path.join(SOURCE_ROOT, 'node_modules', '.bin', 'asar')
   if sys.platform in ['win32', 'cygwin']:
     asar += '.cmd'
-  subprocess.check_call([asar, 'pack', output_dir, archive])
+  subprocess.check_call([node, asar, 'pack', output_dir, archive])
 
 
 def safe_mkdir(path):
-- 
2.11.0

